
//indexedTree.java

import java.util.Scanner;

public class indexedTree {

  

 static final int MAX_TREE = 262144, MAX_N = 100001;

 static int N,Q;

 static int tree[] = new int[MAX_TREE],data[] = new int[MAX_N],i;

  

 public static void main(String[] args) {

  Scanner sc = new Scanner(System.in);

  N = sc.nextInt(); Q = sc.nextInt();

  for(i=0;i<N;i++)

  {

   data[i] = sc.nextInt();

  }

   

  //처음으로 N보다 크거나 같은 2의 제곱 수

  int tmpN;

  for(tmpN=1;tmpN<=N;tmpN*=2);

  //초기 데이터 설정

  for(i=0;i<N;i++)

  {

   tree[i+tmpN]=data[i];

  } 

  //초기 데이터로 트리 데이터 구성

  for(i=tmpN-1;i>=1;i--)

  {

   tree[i] = Math.min(tree[i*2],tree[i*2+1]);

  }

  //쿼리 입력 및 처리

  for(i=1;i<=Q;i++)

  {

   int c,x,y;

   c = sc.nextInt(); x = sc.nextInt(); y = sc.nextInt();

   //수정

   if(c==1)

   {

    tree[x+tmpN-1]=y;

    x=(x+tmpN-1)/2;

    while(x!=0)

    {

     tree[x]=Math.min(tree[x*2],tree[x*2+1]);

     x/=2;

    }

   }

   //구간 최소값 구하기

   else

   {

    int min=2000000000;//20억

    x+=tmpN-1;

    y+=tmpN-1;

    while(x<=y)

    {

     if(x%2==1)min=Math.min(tree[x],min);

     if(y%2==0)min=Math.min(tree[y],min);

     x=(x+1)/2;

     y=(y-1)/2;

    }

    System.out.println(min);

   }

  }

  sc.close();

 }

}