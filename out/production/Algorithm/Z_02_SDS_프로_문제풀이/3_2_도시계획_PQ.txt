
import java.io.BufferedReader;

import java.io.InputStreamReader;

import java.util.ArrayList;

import java.util.Collections;

import java.util.PriorityQueue;

import java.util.StringTokenizer;

  

// MST (Kruskal or Prim)

public class Solution {

  

    private static class Point {

        int x;

        int y;

  

        public Point(int x, int y) {

            this.x = x;

            this.y = y;

        }

    }

  

    private static class Road implements Comparable<Road> {

        int start;

        int end;

        long cost;

  

        public Road(int start, int end, long cost) {

            this.start = start;

            this.end = end;

            this.cost = cost;

        }

  

        @Override

        public int compareTo(Road o) {

            // Long compare 는 이렇게

            return Long.compare(this.cost, o.cost);

        }

    }

  

    private static Point[] points;

    private static int[] parent;

    private static PriorityQueue<Road> pq;

  

    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st;

        int T = Integer.parseInt(br.readLine());

  

        for (int tc = 1; tc <= T; tc++) {

            st = new StringTokenizer(br.readLine());

            int N = Integer.parseInt(st.nextToken()); // 도시의 수

            int M = Integer.parseInt(st.nextToken()); // 수원지의 수

  

            points = new Point[N + 1];

            parent = new int[N + 1];

  

            for (int i = 1; i <= N; i++) {

                parent[i] = i;

            }

  

            for (int i = 1; i <= N; i++) {

                st = new StringTokenizer(br.readLine());

                int x = Integer.parseInt(st.nextToken());

                int y = Integer.parseInt(st.nextToken());

                points[i] = new Point(x, y);

            }

  

            st = new StringTokenizer(br.readLine());

            int a = 0;

            for (int i = 0; i < M; i++) {

                int b = Integer.parseInt(st.nextToken());

                // 수원지는 하나의 집합으로 만든다.

                union(a, b);

            }

  

            pq = new PriorityQueue<>();

  

            // 각 도시를 연결하는 모든 경로 (1 ~ N 까지의 합 만큼 간선이 생긴다)

            for (int i = 1; i < N; i++) {

                for (int j = i + 1; j <= N; j++) {

                    pq.offer(new Road(i, j,

                            (long) (points[i].x - points[j].x) * (points[i].x - points[j].x)

                                    + (long) (points[i].y - points[j].y) * (points[i].y - points[j].y)));

                }

            }

  

            System.out.println("#" + tc + " " + kruskal(N - M));

        }

    }

  

    private static long kruskal(int V) {

        long mst_cost = 0;

        int selected = 0;

  

        while (!pq.isEmpty()) {

            Road road = pq.poll();

            if (!equals(road.start, road.end)) {

                mst_cost += road.cost;

                union(road.start, road.end);

                selected++;

                if (selected == V)

                    return mst_cost;

            }

        }

  

        return mst_cost;

    }

  

    private static void union(int a, int b) {

        int x = find(a);

        int y = find(b);

  

        if (x < y) {

            parent[y] = x;

        } else {

            parent[x] = y;

        }

    }

  

    private static boolean equals(int a, int b) {

        int x = find(a);

        int y = find(b);

        return x == y;

    }

  

    private static int find(int a) {

        if (parent[a] == a)

            return a;

        return parent[a] = find(parent[a]);

    }

  

}