
import java.io.*;

import java.util.StringTokenizer;



public class Solution {



    static int T,N,K;

    static int min,max;

    static int[] dp;

    static int result;



    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st;

        T = Integer.parseInt(br.readLine());

        for (int tc = 1; tc <= T ; tc++) {

            st = new StringTokenizer(br.readLine());

            N = Integer.parseInt(st.nextToken());

            K = Integer.parseInt(st.nextToken());



            dp = new int[N+1];

            result = 0;



            st = new StringTokenizer(br.readLine());

            for(int i=1; i<= N; i++){

                dp[i] = Integer.parseInt(st.nextToken());

            }



            int l = 0;

            int r = 1000000;



            while(l <= r){

                int m = (l+r)/2;

                if(solve(m)){

                    result = m;

                    r = m-1;

                }else{

                    l = m+1;

                }

            }



            bw.write("#"+tc+ " " + result+"\n");





        }

        bw.flush();bw.close();



    }



   public static boolean solve(int diff){



       int cnt = 0;

       min = 10000000; max = 0;



       for(int i = 1; i <= N; i++){

           if(min > dp[i])

               min = dp[i];

           if(max < dp[i])

               max = dp[i];

           if(max - min > diff){

               cnt++;

               min = max = dp[i];

               if(cnt == K+1)

                   return false;

           }

       }



       return true;

   }



}