
import java.io.BufferedReader;

import java.io.BufferedWriter;

import java.io.InputStreamReader;

import java.io.OutputStreamWriter;

import java.util.Arrays;

import java.util.StringTokenizer;

 

// DP : Dynamic Programming

public class 휴가계획 {

 

    private static class Project {

        int start;

        int end;

        int cost;

 

        public Project(int start, int end, int cost) {

            this.start = start;

            this.end = end;

            this.cost = cost;

        }

    }

 

    public static void main(String[] args) throws Exception {

//        System.setIn(new FileInputStream("sample_input.txt"));

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

 

        int T = Integer.parseInt(st.nextToken());

 

        for (int t = 1; t <= T; t++) {

            st = new StringTokenizer(br.readLine());

            int N = Integer.parseInt(st.nextToken()); // 프로젝트의 개수 : 1 <= N <= 100,000

            int M = Integer.parseInt(st.nextToken()); // 프리랜서로 일하는 기간 : 1 <= M <= 100,000

            int K = Integer.parseInt(st.nextToken()); // 휴가 기간 : 1 <= K <= M

 

            Project[] pj = new Project[N];

 

            for (int i = 0; i < N; i++) {

                st = new StringTokenizer(br.readLine());

                int S = Integer.parseInt(st.nextToken()); // 프로젝트 시작

                int E = Integer.parseInt(st.nextToken()); // 프로젝트 종료

                int P = Integer.parseInt(st.nextToken()); // 수익

                pj[i] = new Project(S, E, P);

            }

 

            // 1 -> M 까지 오른쪽 방향으로 가면서

            // 1 ~ M 기간 동안 프로젝트를 했을때

            // 가장 많이 버는 돈을 저장한다.

 

            // 프로젝트가 끝나는 시점(end) 기준 오름차순 정렬

            Arrays.sort(pj, (o1, o2) -> o1.end - o2.end);

 

            long[] dp1 = new long[M + 1];

 

            int idx = 0;

            for (int i = 1; i <= M; i++) {

                dp1[i] = dp1[i - 1]; // 우선 직전 값을 끌어온다.

                while (idx < N && pj[idx].end == i) {

                    // ex) idx = 3 : (end 기준 오름 차순으로) 3번째 프로젝트가 4 ~ 6 기간이라면

                    // i 가 6 일때 while 문 안에 진입하고,

                    // 1 ~ 3 기간까지 가장 많이 벌었던 돈(dp[ pj[3].start - 1 ] = dp[3])에서

                    // 3번째 프로젝트의 돈(pj[3].cost)을 더해준 값과

                    // 기존의 dp1[6] 값을 비교해서 그 중 더 큰 값을 넣어준다.

                    dp1[i] = Math.max(dp1[i], dp1[pj[idx].start - 1] + pj[idx].cost);

                    idx++;

                }

            }

 

            // M -> 1 까지 왼쪽 방향으로 가면서

            // M ~ 1 기간 동안 프로젝트를 했을때

            // 가장 많이 버는 돈을 저장한다.

 

            // 프로젝트가 시작하는 시점(start) 기준 내림차순 정렬

            Arrays.sort(pj, (o1, o2) -> o2.start - o1.start);

 

            long[] dp2 = new long[M + 2];

 

            idx = 0;

            for (int i = M; i > 0; i--) {

                dp2[i] = dp2[i + 1];

                while (idx < N && pj[idx].start == i) {

                    dp2[i] = Math.max(dp2[i], dp2[pj[idx].end + 1] + pj[idx].cost);

                    idx++;

                }

            }

 

            long result = 0;

 

            // ex) i = 3 이면,

            // dp1[3] => 1 ~ 3 기간 동안 일했을 때 max 값

            // dp2[3 + 휴가] => (3 + 휴가) ~ M 기간 동안 일했을 때 max 값

            for (int i = 0; i <= M - K; i++) {

                result = Math.max(result, dp1[i] + dp2[i + K + 1]);

            }

 

            bw.write("#" + t + " " + result + "\n");

            bw.flush();

        }

 

    }

 

}