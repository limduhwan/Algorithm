
import java.io.BufferedReader;

import java.io.IOException;

import java.io.InputStreamReader;

import java.util.*;

 

/*

김희성 프로(SW역량강화TF)

알고리즘 유형 : 구간 트리 (인덱스 트리, 세그먼트 트리)

 

풀이

1. 세로 막대기 가로 막대기를 따로 구분해서 배열에 저장한다.

2. 세로 막대기를 세로 축의 아래쪽 (y1 < y2 일 때 y1) 기준으로 오름차순 정렬한다.

3. 가로 막대기를 세로 축(가로 막대기는 y1 = y2 임) 기준으로 오름차순 정렬한다.

4. 세로 축 기준으로 겹칠 수 있는 막대기들만 인덱스 트리에 들어가 있도록 하고,

가로 막대기의 x1 ~ x2 구간합을 인덱스 트리에서 구한다.

구간에서 벗어나는 세로 막대기를 제거하기 위해서 y2 기준으로 정렬되는 우선순위 큐(PQ)를 사용한다.

 

죠르디는 사랑입니다♥

 */

public class 기출_210521_교점찾기 {

 

    private static class Stick {

        int x1, y1, x2, y2;

        public Stick(int x1, int y1, int x2, int y2) {

            // x1 <= x2, y1 <= y2 가 되도록 만들어준다.

            this.x1 = Math.min(x1, x2);

            this.y1 = Math.min(y1, y2);

            this.x2 = Math.max(x1, x2);

            this.y2 = Math.max(y1, y2);

        }

    }

 

    private static final int MAX = 200000;

    private static int[] indexTree;

 

    public static void main(String[] args) throws IOException {

//        System.setIn(new FileInputStream("sample/교점찾기.txt"));

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st;

        int T = Integer.parseInt(br.readLine());

 

        int s_idx = 1;

        while (s_idx < MAX)

            s_idx <<= 1;

 

        indexTree = new int[s_idx * 2]; // 좌표의 구간만큼 만든 구간합 트리

        s_idx--;

 

        for (int tc = 1; tc <= T; tc++) {

            st = new StringTokenizer(br.readLine());

            int N = Integer.parseInt(st.nextToken()); // 막대기의 수

 

            ArrayList<Stick> horizen = new ArrayList<>(); // 가로 방향 막대기들

            ArrayList<Stick> vertical = new ArrayList<>(); // 세로 방향 막대기들

 

            Arrays.fill(indexTree, 0);

 

            for (int i = 1; i <= N; i++) {

                st = new StringTokenizer(br.readLine());

                int x1 = Integer.parseInt(st.nextToken());

                int y1 = Integer.parseInt(st.nextToken());

                int x2 = Integer.parseInt(st.nextToken());

                int y2 = Integer.parseInt(st.nextToken());

 

                Stick stick = new Stick(x1, y1, x2, y2);

 

                // x축이 같으면 세로 방향 막대기임

                if(x1 == x2)

                    vertical.add(stick);

                else

                    horizen.add(stick);

            }

 

            // 세로 막대기, 가로 막대기를 y1 기준으로 오름차순 정렬

            Collections.sort(horizen, (o1, o2) -> Integer.compare(o1.y1, o2.y1));

            Collections.sort(vertical, (o1, o2) -> Integer.compare(o1.y1, o2.y1));

 

            long result = 0;

 

            // 세로축 막대기의 위쪽 지점을 기준으로 오름차순 정렬되는 우선순위 큐

            // 트리에 넣었던 막대기를 제거하기 위한 용도로 사용

            PriorityQueue<Stick> pq = new PriorityQueue<>((o1, o2) -> Integer.compare(o1.y2, o2.y2));

 

            int vidx = 0; // 세로 막대기를 어디까지 넣었는지

 

            for (Stick stick : horizen) {

                while (vidx < vertical.size() && stick.y1 >= vertical.get(vidx).y1) {

                    int x = vertical.get(vidx).x1; // 세로 막대기니까 x1 == x2 임

                    update(x + s_idx, 1); // 해당 X축 위치에 세로 막대기 1개를 트리에 추가

                    pq.offer(vertical.get(vidx)); // 해당 세로 막대기 제거를 위해 우선순위 큐에 저장

                    vidx++;

                }

                while (!pq.isEmpty() && stick.y1 > pq.peek().y2) {

                    int x = pq.poll().x1; // 세로 막대기니까 x1 == x2 임

                    update(x + s_idx, -1); // 해당 X축 위치에 세로 막대기 1개를 트리에서 제거

                }

                result += query(s_idx + stick.x1, s_idx + stick.x2);

            }

 

            System.out.println("#" + tc + " " + result);

 

        }

    }

 

    // 구간합 인덱스 트리

    private static int query(int left, int right) {

        int sum = 0;

 

        while (left <= right) {

            if (left % 2 == 1)

                sum += indexTree[left];

            if (right % 2 == 0)

                sum += indexTree[right];

 

            left = (left + 1) >> 1;

            right = (right - 1) >> 1;

        }

 

        return sum;

    }

 

    private static void update(int idx, int diff) {

        while (idx != 0) {

            indexTree[idx] += diff;

            idx >>= 1;

        }

    }

 

}