
import java.io.BufferedReader;

import java.io.IOException;

import java.io.InputStreamReader;

import java.util.Arrays;

import java.util.StringTokenizer;

 

/*

김희성 프로(SW역량강화TF)

알고리즘 유형 : Union-Find

 

풀이

Union-Find 로 사이클을 찾는다.

Union-Find 로 각각 그룹에 연결된 정점들의 수를 구한다.

사이클이 없는 그룹의 정점 수를 곱한다.

 

죠르디는 사랑입니다♥

 */

public class 기출_210416_터미널_UnionFind {

 

    private static final int MOD = 1000000007;

    private static int[] parent, cnt;

    private static boolean[] isCycle, visit;

 

    public static void main(String[] args) throws IOException {

//        System.setIn(new FileInputStream("sample/터미널.txt"));

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st;

        int T = Integer.parseInt(br.readLine());

 

        for (int tc = 1; tc <= T; tc++) {

            st = new StringTokenizer(br.readLine());

            int N = Integer.parseInt(st.nextToken()); // 노드의 수

            int M = Integer.parseInt(st.nextToken()); // 간선의 수

 

            parent = new int[N + 1];

            cnt = new int[N + 1];

 

            // 각 그룹에 정점이 1개 있는 것으로 저장

            Arrays.fill(cnt, 1);

 

            isCycle = new boolean[N + 1];

            visit = new boolean[N + 1];

 

            for (int i = 1; i <= N; i++)

                parent[i] = i;

 

            for (int i = 0; i < M; i++) {

                st = new StringTokenizer(br.readLine());

                int start = Integer.parseInt(st.nextToken());

                int end = Integer.parseInt(st.nextToken());

                // 같은 집합이면 사이클임

                if (equals(start, end))

                    isCycle[parent[start]] = true;

                // 다른 집합이면 Union 한다.

                else

                    union(start, end);

            }

 

            long result = 1;

 

            for (int i = 1; i <= N; i++) {

                if (!isCycle[find(i)] && !visit[parent[i]]) {

                    result *= cnt[parent[i]];

                    result %= MOD;

                    visit[parent[i]] = true;

                }

            }

 

            System.out.println("#" + tc + " " + result);

 

        }

    }

 

    private static void union(int a, int b) {

        int x = find(a);

        int y = find(b);

 

        if (x < y) {

            parent[y] = x;

            // y 그룹 모임의 인원 수를 x 그룹 인원 수에 더한다.

            cnt[x] += cnt[y];

            // y 그룹에 사이클이 있으면 x 그룹에도 사이클이 있음 표시

            if (isCycle[y])

                isCycle[x] = true;

        } else {

            parent[x] = y;

            // x 그룹 모임의 인원 수를 y 그룹 인원 수에 더한다.

            cnt[y] += cnt[x];

            // x 그룹에 사이클이 있으면 y 그룹에도 사이클이 있음 표시

            if (isCycle[x])

                isCycle[y] = true;

        }

    }

 

    private static boolean equals(int a, int b) {

        int x = find(a);

        int y = find(b);

        return x == y;

    }

 

    private static int find(int a) {

        if (parent[a] == a)

            return a;

        return parent[a] = find(parent[a]);

    }

 

}