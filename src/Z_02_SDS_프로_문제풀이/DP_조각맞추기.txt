
import java.io.BufferedReader;

import java.io.InputStreamReader;

import java.util.StringTokenizer;

 

/*

김희성 프로(SW역량강화TF)

알고리즘 유형 : DP (Dynamic Programming)

 

풀이는 코드 참고

 

죠르디는 사랑입니다♥

 */

public class 기출_210807_조각맞추기 {

 

    private static final int[][][] puzzle = {

            {

                // {dp의 배열의 i번째, 타입, 번호}

                {-1, 2, 1}, // 1번

                {-2, 2, 4}, // 4번

                {-2, 0, 7} // 7번

            },

            {

                {-1, 2, 1}, // 1번

                {-2, 2, 2}, // 2번

                {-2, 1, 6} // 6번

            },

            {

                {0, 0, 1}, // 1번

                {0, 1, 1}, // 1번

                {-1, 1, 3}, // 3번

                {-1, 0, 5} // 5번

            }

    };

 

    public static void main(String[] args) throws Exception {

//        System.setIn(new FileInputStream("sample/조각맞추기.txt"));

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st;

        int T = Integer.parseInt(br.readLine());

 

        for (int tc = 1; tc <= T; tc++) {

            st = new StringTokenizer(br.readLine());

            int N = Integer.parseInt(st.nextToken()); // 판의 너비

            int M = Integer.parseInt(st.nextToken()); // 조각의 수

 

            int[] score = new int[7 + 1];

 

            for (int i = 0; i < M; i++) {

                st = new StringTokenizer(br.readLine());

                int p = Integer.parseInt(st.nextToken()); // 조각의 번호

                int c = Integer.parseInt(st.nextToken()); // 조각의 점수

                score[p] = c; // p 조각의 점수는 c

            }

 

            // dp[0] 위에 한 칸, dp[1] 아래 한 칸, dp[2] 아래 위 둘다

            long[][] dp = new long[3][N + 1]; // score DP

 

            dp[0][1] = dp[1][1] = score[1]; // 1번 조각을 위 아래 각 한 개씩 사용

            dp[2][1] = dp[0][1] + dp[1][1]; // 1번 조각을 위 아래 둘다 붙임

 

            if (N > 1) {

                dp[0][2] = Math.max(score[4], dp[2][1] + score[1]);

                dp[1][2] = Math.max(score[2], dp[2][1] + score[1]);

                dp[2][2] = Math.max(dp[0][2], dp[1][2]) + score[1];

            }

 

            for (int i = 3; i <= N; i++) {

                for (int j = 0; j < 3; j++) {

                    // puzzle[j].length => [3, 3, 4]

                    for (int k = 0; k < puzzle[j].length; k++) {

                        int[] x = puzzle[j][k];

                        dp[j][i] = Math.max(dp[j][i], dp[x[1]][i + x[0]] + score[x[2]]);

                    }

                }

            }

 

            System.out.println("#" + tc + " " + dp[2][N]);

        }

    }

 

}