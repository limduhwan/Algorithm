
import java.io.BufferedReader;

import java.io.InputStreamReader;

import java.util.StringTokenizer;

 

/*

김희성 프로(SW역량강화TF)

알고리즘 유형 : DP (누적합 + 구간 최대값)

 

풀이

1. 존과 클로이 각각 앞에서부터 누적합을 하면서

    0 ~ N 구간까지 누적합의 MAX 인 값을 각 구간에 저장함

2. 존과 클로이 각각 뒤에서(역방향으로)부터 누적합을 하면서

    N ~ 0 구간까지 누적합의 MAX 인 값을 각 구간에 저장함

3. 존의 앞에서 누적합 (0 ~ X) + 클로이의 뒤에서 누적합(X + 1 ~ N) 의 MAX 와

클로이의 앞에서 누적합 (0 ~ X) + 존의 뒤에서 누적합(X + 1 ~ N) 의 MAX 중

MAX 값이 답

 

죠르디는 사랑입니다♥

 */

 

public class 기출_210515_케이크 {

 

    public static void main(String[] args) throws Exception {

//        System.setIn(new FileInputStream("sample/케이크.txt"));

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        StringTokenizer st, st1;

        int T = Integer.parseInt(br.readLine());

        for (int tc = 1; tc <= T; tc++) {

            st = new StringTokenizer(br.readLine());

 

            int N = Integer.parseInt(st.nextToken()); // 케이크 조각의 수

 

            int[][] num = new int[2][N]; // 0 = 존이 좋아하는 정도, 1 = 클로이가 좋아하는 정도

            int[][] sum_max = new int[2][N]; // 좋아하는 정도 구간합의 최대 값

            int[][] sum_max_rev = new int[2][N]; // 좋아하는 정도 구간합의 최대 값 (역방향)

 

            st = new StringTokenizer(br.readLine());

            st1 = new StringTokenizer(br.readLine());

 

            for (int i = 0; i < N; i++) {

                num[0][i] = Integer.parseInt(st.nextToken());

                num[1][i] = Integer.parseInt(st1.nextToken());

            }

 

            int[] sum = new int[2];

            sum[0] = sum_max[0][0] = num[0][0]; // 0 ~ 0 구간의 MAX 값은 0 값 그대로

            sum[1] = sum_max[1][0] = num[1][0];

 

            for (int i = 1; i < N; i++) {

                // 0 = 존, 1 = 클로이

                for (int j = 0; j < 2; j++) {

                    // 직전이 음수였으면 안 더하는 것이 낫다.

                    if (sum[j] < 0)

                        sum[j] = num[j][i];

                    else

                        sum[j] += num[j][i];

                    // 직전까지 MAX 와 지금까지 합계(SUM) 중에 더 큰 값을 지금 구간까지 MAX 로 넣는다.

                    sum_max[j][i] = Math.max(sum[j], sum_max[j][i - 1]);

                }

            }

 

            sum[0] = sum_max_rev[0][N - 1] = num[0][N - 1]; // 역방향

            sum[1] = sum_max_rev[1][N - 1] = num[1][N - 1];

 

            for (int i = N - 2; i >= 0; i--) {

                // 0 = 존, 1 = 클로이

                for (int j = 0; j < 2; j++) {

                    // 직전이 음수였으면 안 더하는 것이 낫다.

                    if (sum[j] < 0)

                        sum[j] = num[j][i];

                    else

                        sum[j] += num[j][i];

                    // 직전까지 MAX 와 지금까지 합계(SUM) 중에 더 큰 값을 지금 구간까지 MAX 로 넣는다.

                    sum_max_rev[j][i] = Math.max(sum[j], sum_max_rev[j][i + 1]);

                }

            }

 

            // 입력 값이 전부 음수인 케이스가 있을 수 있기 때문에 초기값은 아주 작은 음수로 설정

            int result = Integer.MIN_VALUE;

 

            for (int i = 0; i < N - 1; i++) {

                // 존의 정방향 MAX + 클로이의 역방향 MAX 의 합이 최대가 되는 값

                result = Math.max(result, sum_max[0][i] + sum_max_rev[1][i + 1]);

                // 클로이의 정방향 MAX + 존의 역방향 MAX 의 합이 최대가 되는 값

                result = Math.max(result, sum_max[1][i] + sum_max_rev[0][i + 1]);

            }

 

            System.out.println("#" + tc + " " + result);

 

        }

 

    }

}