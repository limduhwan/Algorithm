
import java.io.*;

import java.util.ArrayDeque;

import java.util.StringTokenizer;

 

/*

김희성 프로(SW역량강화TF)

알고리즘 유형 : BFS (너비 우선 탐색) 혹은 DFS (깊이 우선 탐색)

 

풀이

말단(끝) 지점 3 곳을 시작점으로 BFS 탐색하여 누적합으로 총 거리를 구한다.

3곳에서 돌린 BFS 거리의 합 중에 최소값을 구하면 되는데,

이 때 삼거리부터의 거리는 2번 계산되어 있으니까 한 번 빼주면 된다.

 

1. 연결된 간선이 1개인 정점은 끝 지점이다. 연결된 간선이 3개인 정점은 삼거리이다.

2. 연결된 간선이 1개인 정점들과 삼거리에서 BFS 탐색을 수행하면서 거리를 구한다.

3. 위에서 구한 3개의 BFS 탐색 거리의 합에서 삼거리에서의 거리를 한 번 빼준다.

 

죠르디는 사랑입니다♥

 */

public class 기출_210604_운하_탐색4번_배열 {

 

    private static final int MAX = 300000;

    private static final int[] cost = new int[MAX + 1]; // 배의 이동 비용

    private static final long[] sum_cost = new long[MAX + 1]; // 이동 비용의 단순 합

    private static final long[] total_tmp = new long[MAX + 1]; // 이동 비용의 단순 합 임시저장

    private static final long[] total_cost = new long[MAX + 1]; // 이동 비용의 총합 --> 여기서 MIN 값이 답

    private static final boolean[] visited = new boolean[MAX + 1]; // 방문 여부 체크 용

    private static final int[] cnt = new int[MAX + 1];

    private static final int[][] adjList = new int[3][MAX + 1];

 

    private static final ArrayDeque<Integer> queue = new ArrayDeque<>();

 

    public static void main(String[] args) throws IOException {

//        System.setIn(new FileInputStream("sample/운하.txt"));

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int T = Integer.parseInt(br.readLine());

 

        for (int tc = 1; tc <= T; tc++) {

            int N = Integer.parseInt(br.readLine()); // 집의 수

 

            StringTokenizer st = new StringTokenizer(br.readLine());

            for (int i = 1; i <= N; i++) {

                cost[i] = Integer.parseInt(st.nextToken());

                total_cost[i] = cnt[i] = 0;

            }

 

            for (int i = 1; i < N; i++) {

                st = new StringTokenizer(br.readLine());

                int from = Integer.parseInt(st.nextToken());

                int to = Integer.parseInt(st.nextToken());

                adjList[cnt[from]++][from] = to;

                adjList[cnt[to]++][to] = from;

            }

 

//            dfs(N);

            bfs(N);

 

            // 최소값 찾기

            long result = Long.MAX_VALUE;

 

            for (int i = 1; i <= N; i++) {

                result = Math.min(result, total_cost[i]);

            }

 

            bw.write("#" + tc + " " + result + "\n");

            bw.flush();

 

        }

    }

 

    private static void dfs(int N) {

        for (int i = 1; i <= N; i++) {

            // 연결된 정점이 3개면 삼거리, 1개면 끝 부분임

            if (cnt[i] != 2) {

                // 연결된 정점이 3개면 삼거리니까 -1 을 곱해서 total 에 더한다.

                int offset = cnt[i] == 3 ? -1 : 1;

 

                // 초기화

                for (int j = 1; j <= N; j++) {

                    total_tmp[j] = sum_cost[j] = 0;

                }

 

                dfs(0, i);

 

                for (int j = 1; j <= N; j++) {

                    total_cost[j] += total_tmp[j] * offset;

                }

            }

        }

    }

 

    private static void dfs(int before, int now) {

        sum_cost[now] = sum_cost[before] + cost[before];

        total_tmp[now] = total_tmp[before] + sum_cost[now];

        for (int i = 0; i < cnt[now]; i++) {

            int next = adjList[i][now];

            if (before != next)

                dfs(now, next);

        }

    }

 

    private static void bfs(int N) {

 

        for (int i = 1; i <= N; i++) {

            // 연결된 정점이 3개면 삼거리, 1개면 끝 부분임

            if (cnt[i] != 2) {

                // 연결된 정점이 3개면 삼거리니까 -1 을 곱해서 total 에 더한다.

                int offset = cnt[i] == 3 ? -1 : 1;

 

                // 초기화

                for (int j = 1; j <= N; j++) {

                    visited[j] = false;

                    total_tmp[j] = sum_cost[j] = 0;

                }

 

                // BFS 탐색 시작 정점

                queue.add(i);

                visited[i] = true;

 

                while (!queue.isEmpty()) {

                    int now = queue.poll();

 

                    for (int j = 0; j < cnt[now]; j++) {

                        int next = adjList[j][now];

                        if (!visited[next]) {

                            visited[next] = true;

                            // 단순 cost 누적

                            sum_cost[next] = sum_cost[now] + cost[now];

                            // 실제 거리의 합

                            total_tmp[next] = total_tmp[now] + sum_cost[next];

                            // 총합 거리에 더해줌 (이때 삼거리는 반대로 빼줌)

                            total_cost[next] += total_tmp[next] * offset;

 

                            queue.add(next);

                        }

                    }

                }

            }

        }

 

    }

 

}