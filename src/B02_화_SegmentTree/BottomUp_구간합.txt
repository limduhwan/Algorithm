
import java.io.*;

import java.util.Arrays;

import java.util.StringTokenizer;

 

// 백준 구간 합

// https://www.acmicpc.net/problem/2042

public class IndexTree_구간합 {

 

    private static long[] indexTree; // 인덱스 트리 데이터 저장

    private static int s_idx;

 

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        int N = Integer.parseInt(st.nextToken());

        int M = Integer.parseInt(st.nextToken());

        int K = Integer.parseInt(st.nextToken());

 

        // leaf 노드 시작 지점 계산

        s_idx = 1;

        while (s_idx < N)

            s_idx *= 2;

 

        indexTree = new long[s_idx * 2];

 

        // leaf 노드 시작 위치는 -1 을 해줘야함

        s_idx--;

 

        for (int i = 1; i <= N; i++) {

            indexTree[i + s_idx] = Long.parseLong(br.readLine());

        }

 

        init(s_idx + 1, N);

 

        for (int i = 0; i < M + K; i++) {

            st = new StringTokenizer(br.readLine());

            int a = Integer.parseInt(st.nextToken());

            int b = Integer.parseInt(st.nextToken());

            long c = Long.parseLong(st.nextToken());

            if (a == 1) {

                update(s_idx + b, c);

            } else {

                long result = query(s_idx + b, (int) (s_idx + c));

                bw.write(result + "\n");

            }

        }

 

        bw.flush();

 

    }

 

    // 인덱스 트리

    private static void init(int start, int end) {

        for (int i = start; i < start + end; i++) {

            int P = i >> 1; // P = i / 2;

            while (P != 0) {

                indexTree[P] += indexTree[i];

                // P /= 2;

                P >>= 1;

            }

        }

    }

 

    ////////  61 38 23 11 27 9 14 8 3 26 1 7 2 4 10

 

    // 밑에서부터 시작과 끝이 올라와서 만나게 된다면

    // 현재 노드가 그들의 부모인 것이고,

    // 현재 노드가 가지고 있는 값은 하위 모든 노드들의 합이다.

    private static long query(int left, int right) {

        long sum = 0;

 

        while (left <= right) {

            // 시작하는 부분이 홀수 일 때

            if (left % 2 == 1)

                sum += indexTree[left];

            // 끝나는 부분이 짝수 일 때

            if (right % 2 == 0)

                sum += indexTree[right];

 

            // left = (left + 1) / 2;

            left = (left + 1) >> 1;

            // right = (right - 1) / 2;

            right = (right - 1) >> 1;

        }

 

        return sum;

    }

 

    // idx 의 수를 새로운 val 로 바꿀때

    private static void update(int idx, long val) {

        // 기존 값과 새로운 값의 차이만큼 더해준다.

        val -= indexTree[idx];

        while (idx != 0) {

            indexTree[idx] += val;

            idx >>= 1;

        }

    }

 

    // idx 의 수에 diff 만큼 더할때

//    private static void update(int idx, long diff) {

//        while (idx != 0) {

//            indexTree[idx] += diff;

//            idx >>= 1;

//        }

//    }

 

}