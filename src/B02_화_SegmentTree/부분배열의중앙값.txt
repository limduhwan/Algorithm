
import java.io.BufferedReader;

import java.io.IOException;

import java.io.InputStreamReader;

import java.util.Arrays;

import java.util.StringTokenizer;

  

//[기출P-0049] 부분배열의 중앙값

public class Solution{

  

static int midTree[];

static long sol;

static part partArr[];

public static void main(String args[]) throws NumberFormatException, IOException{

 BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

 int T = Integer.parseInt(br.readLine());

 for(int testCase=1; testCase<T+1; testCase++) {

    //위치로서 중앙값을 찾아낸다.

       sol=0;

       StringTokenizer st = new StringTokenizer(br.readLine());

       //배열의 원소는 1~십억 이하 20억 정도가  int

       int N = Integer.parseInt(st.nextToken()); //1<=N<=100000

       int K = Integer.parseInt(st.nextToken()); //K만큼 부분수열만들기

       midTree = new int[N*4];

       partArr = new part[N];

       int baseArr[] = new int[N];

       StringTokenizer base = new StringTokenizer(br.readLine());

       int sP=0; int eP=K;

         

       if(K==1){

        for(int cnt=0; cnt<N; cnt++) {

         long num = Long.parseLong(base.nextToken());

         sol = Math.max(sol, num);

        }

       }else{

        for(int cnt=0; cnt<N; cnt++) {

         int num = Integer.parseInt(base.nextToken());

            baseArr[cnt] =num;

            partArr[cnt] = new part(cnt,num);

         }

          

        //0. 정렬을 하여 순번을 만든다

        Arrays.sort(partArr);

        int guideNum=1;

        baseArr[partArr[0].idx] = 1;

        for(int roop=1; roop<partArr.length; roop++){

         int index = partArr[roop].idx;

         if(roop!=0 && (partArr[roop-1].realVal == partArr[roop].realVal)){

          baseArr[index] = guideNum;

         }else if(partArr[roop-1].realVal != partArr[roop].realVal){ 

          baseArr[index] = roop+1;

          guideNum=roop+1;

         }

        }

          

        //1. 초기값 Tree에 Update 선택된 값들

        for(int initCnt=0; initCnt<K; initCnt++){

            update(1,N,1,baseArr[initCnt],1);

        }

        int midVal = (int) Math.ceil(K/2)+1; 

        //2. 부분배열 중앙값 정렬하여 찾음

         for(int midSel=0; midSel<N-K; midSel++) {

          search(1,N,1,midVal);   //중앙값 찾기

          update(1,N,1,baseArr[sP],-1); sP++; //앞에 하나 빼기

          update(1,N,1,baseArr[eP],1); eP++;  //끝에 하나 넣기

         }

         //3. 엔딩 포인트

         search(1,N,1,midVal);

           

       }

       if(K==1){

           System.out.println("#"+testCase+" "+sol);

       }else{

           System.out.println("#"+testCase+" "+partArr[(int) (sol-1)].realVal); 

       }

    }

}

        

 static public void update(int left, int right, int node, int c_node, int diff) {

  if(left==right) {

   midTree[node] = midTree[node]+diff;

         return;

     }else {

         int mid = (left+right)/2;

         if(c_node<=mid) {

          update(left,mid,(node*2),c_node,diff);

         }else {

          update(mid+1,right,(node*2)+1,c_node,diff);

         }

         midTree[node] = midTree[node*2]+ midTree[(node*2)+1];

     }

  }

        

 static public void search(int left, int right, int node, long num) {

  if(midTree[node]<num){

   return;

     }else{

      if(right==left){

       sol = Math.max(sol, right);

           return;

         }

         int mid =(left+right)/2;

         if(midTree[node*2]<num){

           search(mid+1,right,(node*2)+1,num-midTree[node*2]);

         }else{

           search(left,mid,(node*2),num);

         }

     }

 }

   

 static public class part implements Comparable<part>{

  int idx;

  long realVal;

    

  part(int idx,long realVal){

   this.idx=idx;

   this.realVal=realVal;

  }

  

  public int compareTo(part other) {

   if(other.realVal==this.realVal){

    return 0;

   }

   if(this.realVal-other.realVal>0){

       return 1;

   }else if(this.realVal-other.realVal<0){

       return -1;

   }else{

       return 0;

   }  

  }

 }

}